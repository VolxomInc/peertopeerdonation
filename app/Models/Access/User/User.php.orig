<?php

namespace App\Models\Access\User;

use App\Models\Access\Role\Role;
use App\Models\AssignedRoles;
use Illuminate\Notifications\Notifiable;
use App\Models\Access\User\Traits\UserAccess;
use Illuminate\Database\Eloquent\SoftDeletes;
use App\Models\Access\User\Traits\Scope\UserScope;
use Illuminate\Foundation\Auth\User as Authenticatable;
use App\Models\Access\User\Traits\UserSendPasswordReset;
use App\Models\Access\User\Traits\Attribute\UserAttribute;
use App\Models\Access\User\Traits\Relationship\UserRelationship;
use DB;
use App\Models\Access\Role\Role;

/**
 * Class User
 * @package App\Models\Access\User
 */
class User extends Authenticatable
{
    use UserScope,
		UserAccess,
		Notifiable,
		SoftDeletes,
		UserAttribute,
		UserRelationship,
		UserSendPasswordReset;

	/**
	 * The database table used by the model.
	 *
	 * @var string
	 */
	protected $table;
	protected $primaryKey = 'user_id';
    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['display_name', 'email', 'password', 'status', 'confirmation_code', 'confirmed'];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = ['password', 'remember_token'];

    /**
     * @var array
     */
    protected $dates = ['deleted_at'];

	/**
	 * @param array $attributes
	 */
	public function __construct(array $attributes = [])
	{
		parent::__construct($attributes);
		$this->table = config('access.users_table');
	}

	public function videos()
	{
		return $this->hasMany('App\Models\Videos');
	}

	public function images()
	{
		return $this->hasMany('App\Models\Images');
	}

    public function userroles() {
        return $this->belongsToMany('App\Models\Access\Role\Role','assigned_roles');
    }

    public static function userList()
    {
        return User::pluck('display_name', 'user_id');
    }

<<<<<<< HEAD
    public function scopeCutomersList()
    {
    	$role = Role::where('name', 'Real Estate or Business')->orWhere('name', 'Individual')->get();
    	return DB::table('users')
        ->join('assigned_roles', 'users.user_id', '=', 'assigned_roles.user_id')
        ->where('assigned_roles.role_id', '=', $role['0']->role_id)
        ->orWhere('assigned_roles.role_id', '=', $role['1']->role_id)
        ->get();
    }
=======
	public static function userRole($user_id)
	{
		$role_id = AssignedRoles::where('user_id','=',$user_id)->value('role_id');
		return Role::where('role_id','=',$role_id)->value('name');
	}
>>>>>>> e26ebef404759a761a7db30d191ea3d445545285
} 
